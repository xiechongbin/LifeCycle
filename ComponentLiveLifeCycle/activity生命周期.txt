
Log日志打印结果:activity启动： onCreate-->onStart-->onPostCreate-->onResume-->onPostResume。

按下返回键：onPause-->onStop-->onDestroy------>再次按下应用图标：onCreate-->onStart-->onPostCreate-->onResume-->onPostResume。

按下home键： onPause-->onStop——————————再次按下应用图标：onRestart-->onStart-->onResume-->onPostResume

按下进程管理键:onPause-->onStop--------- 直接清理掉应用：onDestroy

跳转到其他activity: 当前activity:onPause-->onCreateB-->onStartB-->onPostCreateB-->onResumeB-->onPostResumeB-->onStop
再次按下返回键返回上一个Activity:onPauseB-->onRestart-->onStart-->onResume-->onPostResume-->onStopB
弹出对话框： 不会引起生命周期的变化


关于activity的四个状态：
running-poused-stopped-killed

running->当前显示在屏幕的activity(位于任务栈的顶部)，用户可见状态。
poused->依旧在用户可见状态，但是界面焦点已经失去，此Activity无法与用户进行交互。
stopped->用户看不到当前界面,也无法与用户进行交互 完全被覆盖.
killed->当前界面被销毁，等待这系统被回收
onCreate():
当我们点击activity的时候，系统会调用activity的oncreate()方法，在这个方法中我们会初始化当前布局setContentLayout（）方法。
onStart():
onCreate()方法完成后，此时activity进入onStart()方法,当前activity是用户可见状态，但没有焦点，与用户不能交互，一般可在当前方法做一些动画的初始化操作。
onResume():
onStart()方法完成之后，此时activity进入onResume()方法中，当前activity状态属于运行状态 (Running)，可与用户进行交互。
onPouse()
当另外一个activity覆盖当前的acitivty时，此时当前activity会进入到onPouse()方法中，当前activity是可见的，但不能与用户交互状态。
onStop()
onPouse()方法完成之后，此时activity进入onStop()方法，此时activity对用户是不可见的，在系统内存紧张的情况下，有可能会被系统进行回收。所以一般在当前方法可做资源回收。
onDestory()
onStop()方法完成之后，此时activity进入到onDestory()方法中，结束当前activity。
onRestart()
onRestart()方法在用户按下home()之后，再次进入到当前activity的时候调用。调用顺序onPouse()->onStop()->onRestart()->onStart()->onResume().


Activity中onSaveInstanceState()和onRestoreInstanceState()

onSaveInstanceState函数在Activity生命周期中执行。
outState 参数作用 :
数据保存 : Activity 声明周期结束的时候, 需要保存 Activity 状态的时候, 会将要保存的数据使用键值对的形式 保存在 Bundle 对象中;

调用时机 :
Activity 被销毁的时候调用, 也可能没有销毁就调用了;
按下Home键 : Activity 进入了后台, 此时会调用该方法;
按下电源键 : 屏幕关闭, Activity 进入后台;
启动其它 Activity : Activity 被压入了任务栈的栈底;
横竖屏切换 : 会销毁当前 Activity 并重新创建；

onSaveInstanceState方法调用注意事项 :
用户主动销毁不会调用 : 当用户点击回退键 或者 调用了 finish() 方法, 不会调用该方法;
调用时机不固定 : 该方法一定是在 onStop() 方法之前调用, 但是不确定是在 onPause() 方法之前 还是 之后调用;
布局中组件状态存储 : 每个组件都 实现了 onSaveInstance() 方法, 在调用函数的时候, 会自动保存组件的状态, 注意, 只有有 id 的组件才会保存;
关于默认的 super.onSaveInstanceState(outState) : 该默认的方法是实现 组件状态保存的;

onRestoreInstanceState(Bundle outState):
方法回调时机 : 在 Activity 被系统销毁之后 恢复 Activity 时被调用, 只有销毁了之后重建的时候才调用, 如果内存充足, 系统没有销毁这个 Activity, 就不需要调用;
– Bundle 对象传递 : 该方法保存的 Bundle 对象在 Activity 恢复的时候也会通过参数传递到 onCreate() 方法中;

